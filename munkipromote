#!/usr/bin/python
'''This script will take items in a Munki catalog
and place them in the chosen catalog from
munkipromote.conf.  You can define as many catalogs
as you would like i.e. testing, production, development'''
# Joshua D. Miller - josh@psu.edu - June 23, 2016
# The Pennsylvania State University - College of Education

from __future__ import print_function
import os
import plistlib
import subprocess
import sys
from ConfigParser import SafeConfigParser
from datetime import datetime, timedelta


def main():
    '''This function will read in the configuration
    sections defined in munkipromote.conf'''
    # Read Config File
    # Set Configuration Parser
    conf_parser = SafeConfigParser({'VERBOSE': 'True'})
    # Determine the path of the script
    script_path = os.path.realpath(os.path.dirname(sys.argv[0]))
    # Set the location of the munkipromote.conf file
    conf_file = '{0:}/munkipromote.conf'.format(script_path)
    # Attempt to read the config file
    try:
        conf_parser.read(conf_file)
    except StandardError as error:
        print(error)
        sys.exit(1)
    # Read Munki Repo location
    munki_repo = conf_parser.get('main', 'REPO')
    pkgsinfo = '{0:}/pkgsinfo'.format(munki_repo)
    # Parse Configuration file for different catalogs and
    # their applications to promote.
    for promotion_group in conf_parser.sections():
        if (conf_parser.has_option(promotion_group, 'apps')
                and conf_parser.has_option(promotion_group, 'time')
                and conf_parser.has_option(promotion_group, 'promote_from')
                and conf_parser.has_option(promotion_group, 'promote_to')):
            config_options = dict()
            # Read group name in config file
            # Read applications to move to specified catalog
            config_options[0] = conf_parser.get(promotion_group,
                                                'apps')
        	# Read last modified time limit (Days)
            config_options[1] = int(conf_parser.get(promotion_group,
                                                    'time'))
            # Read the catalog to promote from
            config_options[2] = conf_parser.get(promotion_group,
                                                'promote_from')
            # Read the catalog to promote to
            config_options[3] = [conf_parser.get(promotion_group,
                                                 'promote_to')]
            # Perform promotion of desired applications
            promote_apps(pkgsinfo, promotion_group, config_options)
        else:
            continue
    if conf_parser.has_option('main', 'MAKECATALOGS'):
        makecatalogspath = conf_parser.get('main', 'MAKECATALOGS')
    else:
        print("Using default value for MAKECATALOGS")
        makecatalogspath = '/usr/local/munki/makecatalogs'
    makecatalogs(makecatalogspath, munki_repo)


def promote_apps(repo, group, config_options):
    '''This function will perform promotions of
    the applications from one group to another'''
	# Create list to append updated pkginfo/plist apps
    updated_apps = []
    # Working Files will handle or current file
    # timestamp and plist
    working_files = dict()
    # os_walker will handle our os.walk
    # for dirname, dirnames in filenames:
    #  for filename in filenames:
    os_walker = dict()
    # Check pkginfo and plist files in Munki Repo and change their catalog
    # based of modification time and catalog selected.
    # Begin searching through the pkginfo directory
    for os_walker[0], os_walker[1], os_walker[2] in os.walk(repo):
        for os_walker[3] in os_walker[2]:
        	# Omit hidden files
            if os_walker[3].startswith("."):
                continue
            # Capture Current file
            working_files[0] = os.path.join(os_walker[0], os_walker[3])
            # Read PLIST file
            working_files[1] = plistlib.readPlist(working_files[0])
            # Get last modified time of the file
            getmtime = os.path.getmtime(working_files[0])
            modifytime = datetime.fromtimestamp(getmtime)
            # Get current time of script run
            now = datetime.now()
            # Change time from config into a date time
            # First Convert the days to a timestamp
            days_from_config = timedelta(days=config_options[1])
            # Now set the desired file has not been modified for x days
            desired_last_modified_time = now - days_from_config
            # Check if the file has not been modified
            # for time specified in config
            if (config_options[2] in working_files[1]['catalogs']
                    and modifytime < desired_last_modified_time
                    and working_files[1]['name'] in config_options[0]):
                try:
                    # Update Catalog
                    working_files[1]['catalogs'] = config_options[3]
                    # Add to list of updated applications
                    updated_apps.append(list([working_files[1]['name'],
                                              working_files[1]['version']]))
                    # Write the file
                    plistlib.writePlist(working_files[1], (working_files[0]))
                except StandardError:
                    print("Could not update pkginfo for {0:}"
                          .format(working_files[0]))
                    continue
    # Print output of changes made
    if not updated_apps:
        print("No items defined in {0:} were promoted to the {1:} "
              "catalog from the {2:} catalog..."
              .format(group, config_options[3][0], config_options[2]))
    else:
        # Print the applications that were updated for each catalog
        print("The following items defined in {0:} were promoted "
              "to the {1:} catalog from the {2:} catalog... \n"
              .format(group, config_options[3][0], config_options[2]))
        space = 50
        print("{0:{space}}{1:}\n{2:{space}}{3:}"
              .format("Name", "Version", "----", "-------", space=space))
        for name, version in updated_apps:
            print('{0:{space}}{1:}'.format(name, version, space=space))
        print()

def makecatalogs(makecatalogspath, munki_repo):
    '''Performs Munki's makecatalogs
    functiong after all promotions have
    been completed.'''
    try:
        # Update the Munki Catalogs
        print("Updating catalogs....")
        # Suppress the output of makecatalogs
        subprocess.check_call([makecatalogspath, munki_repo],
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE)
    except StandardError as error:
        print("Could not update the Munki catalogs.  Please run makecatalogs")
        print(error)

if __name__ == '__main__':
    main()

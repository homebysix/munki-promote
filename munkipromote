#!/usr/bin/python
"""This script will take items in a Munki catalog and place them in the chosen catalog
from config.py. You can define as many catalogs as you would like i.e. testing,
production, development"""
# Joshua D. Miller - josh@psu.edu - June 23, 2016
# The Pennsylvania State University - College of Education

from __future__ import print_function

import os
import plistlib
import subprocess
import sys
from datetime import datetime, timedelta

from config import PROMOTION_GROUPS, MAKECATALOGS, REPO


def main():
    """This function will read in the configuration sections defined in config.py"""
    # Determine the path of the script
    script_path = os.path.realpath(os.path.dirname(sys.argv[0]))
    # Read Pkgsinfo location
    pkgsinfo = "{}/pkgsinfo".format(REPO)
    # Parse Configuration file for different catalogs and
    # their applications to promote.
    for promotion_group in PROMOTION_GROUPS:
        if (
            "name" in promotion_group
            and "days" in promotion_group
            and "promote_from" in promotion_group
            and "promote_to" in promotion_group
        ):
            # Perform promotion of desired applications
            promote_apps(pkgsinfo, promotion_group)
        else:
            continue
    makecatalogs(
        MAKECATALOGS if MAKECATALOGS else "/usr/local/munki/makecatalogs", REPO
    )


def promote_apps(pkgsinfo, promotion_group):
    """This function will perform promotions of the applications from one group to another"""
    # Create list to append updated pkginfo/plist apps
    updated_apps = []
    # Check pkginfo and plist files in Munki Repo and change their catalog
    # based of modification time and catalog selected.
    # Begin searching through the pkginfo directory
    for root, dirs, files in os.walk(pkgsinfo):
        dirs[:] = [d for d in dirs if not d.startswith(".")]
        for filename in files:
            # Omit hidden files
            if filename.startswith("."):
                continue
            # Capture Current file
            filepath = os.path.join(root, filename)
            # Read PLIST file
            pkginfo = plistlib.readPlist(filepath)
            # Get last modified time of the file
            modifytime = datetime.fromtimestamp(os.path.getmtime(filepath))
            # Get current time of script run
            now = datetime.now()
            # Change time from config into a date time
            # First Convert the days to a timestamp
            days_from_config = timedelta(days=promotion_group["days"])
            # Now set the desired file has not been modified for x days
            desired_last_modified_time = now - days_from_config
            # Check if the file has not been modified
            # for time specified in config
            if "include_apps" in promotion_group:
                if (
                    promotion_group["promote_from"] in pkginfo["catalogs"]
                    and modifytime < desired_last_modified_time
                    and pkginfo["name"] in promotion_group["include_apps"]
                ):
                    try:
                        # Update Catalog
                        pkginfo["catalogs"] = [promotion_group["promote_to"]]
                        # Add to list of updated applications
                        updated_apps.append(list([pkginfo["name"], pkginfo["version"]]))
                        # Write the file
                        plistlib.writePlist(pkginfo, filepath)
                    except StandardError:
                        print("Could not update pkginfo for {}".format(filepath))
                        continue
            # elif "exclude_apps" in promotion_group:
            #     if (
            #         promotion_group["promote_from"] in pkginfo["catalogs"]
            #         and modifytime < desired_last_modified_time
            #         and pkginfo["name"] not in promotion_group["exclude_apps"]
            #     ):
            #         try:
            #             # Update Catalog
            #             pkginfo["catalogs"] = [promotion_group["promote_to"]]
            #             # Add to list of updated applications
            #             updated_apps.append(list([pkginfo["name"], pkginfo["version"]]))
            #             # Write the file
            #             plistlib.writePlist(pkginfo, filepath)
            #         except StandardError:
            #             print("Could not update pkginfo for {}".format(filepath))
            #             continue
    # Print output of changes made
    if not updated_apps:
        print(
            "No items defined in {} were promoted to the {} "
            "catalog from the {} catalog...".format(
                promotion_group["name"],
                promotion_group["promote_to"],
                promotion_group["promote_from"],
            )
        )
    else:
        # Print the applications that were updated for each catalog
        print(
            "The following items defined in {} were promoted "
            "to the {} catalog from the {} catalog... \n".format(
                promotion_group["name"],
                promotion_group["promote_to"],
                promotion_group["promote_from"],
            )
        )
        space = 50
        print(
            "{0:{space}}{1}\n{2:{space}}{3}".format(
                "Name", "Version", "----", "-------", space=space
            )
        )
        for name, version in updated_apps:
            print("{0:{space}}{1}".format(name, version, space=space))
        print()


def makecatalogs(makecatalogspath, munki_repo):
    """Performs Munki's makecatalogs function after all promotions have been completed."""
    try:
        # Update the Munki Catalogs
        print("Updating catalogs....")
        # Suppress the output of makecatalogs
        subprocess.check_call(
            [makecatalogspath, munki_repo],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
    except StandardError as error:
        print("Could not update the Munki catalogs. Please run makecatalogs.")
        print(error)


if __name__ == "__main__":
    main()
